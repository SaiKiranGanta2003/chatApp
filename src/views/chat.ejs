<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with Friend</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

    <style>
        body {
            background-image: url("https://i.pinimg.com/736x/d8/03/b9/d803b932a61b7a97b9f0734ad484f5a9.jpg");
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            background-attachment: fixed;
            height: 100vh;
            overflow-y: scroll;
        }

        .chat-container {
            max-width: 600px;
            margin: 20px auto;
        }

        .chat-box {
            min-height: 75vh;
            max-height: 75vh;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px;
            background: white;
            background: rgba(255, 255, 255, 0.2);
            /* Light transparent background */
            backdrop-filter: blur(10px);
            /* Blurs the background behind */
            -webkit-backdrop-filter: blur(10px);
            /* For Safari */
            /* height: 50vh; */
            /* max-width: 400px; */
            /* min-height: 50vh; */

            padding: 20px;
            background: transparent;
            border-radius: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.611);
        }

        .login-container {
            width: 100%;
            background: rgba(255, 255, 255, 0.2);
            /* Light transparent background */
            backdrop-filter: blur(10px);
            /* Blurs the background behind */
            -webkit-backdrop-filter: blur(10px);
            /* For Safari */
            /* height: 50vh; */
            max-width: 400px;
            /* min-height: 50vh; */

            padding: 20px;
            background: transparent;
            border-radius: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.611);
        }

        .header {
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.611);
        }

        #messageInput {
            border-radius: 25px;
            text-indent: 10px;
        }

        .message {
            padding: 8px;
            border-radius: 10px;
            margin: 5px 0;
        }

        .sent {
            background-color: #dcf8c6;
            align-self: flex-end;
            box-shadow: 1px 1px 10px black;
        }

        .received {
            background-color: #ffffff;
            align-self: flex-start;
            box-shadow: 1px 1px 10px black;
            max-width: 350px;
            /* Limits the width */
            word-wrap: break-word;
            /* Breaks long words */
            overflow-wrap: break-word;
            /* Ensures breaking */
            padding: 8px;
            border-radius: 5px;
        }


        .timestamp {
            font-size: 0.8rem;
            color: gray;
            text-align: right;
        }

        .removebutton {
            background-color: transparent;
            outline: none;
            border: none;
            font-size: 10px;
        }

        .send-btn {
            width: 50px;
            height: 50px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 20px;
            transition: 0.3s;
            border: none;
        }

        .send-btn:hover {
            background-color: #0056b3;
            transform: scale(1.1);
        }

        @media screen and (max-width:769px) {
            body{
                background-image: url("https://i.pinimg.com/736x/0c/92/2e/0c922e9156d08fab8bcc77d482b74c5d.jpg");
                
            }
            .received{
                max-width: 300px;
            }
        }
    </style>
</head>

<body>
    <header class="header pt-2 pb-2 text-dark" style="padding-left:10px;">
        <h2>Chat App</h2>
    </header>

    <div class="container chat-container">
        <div class="chat-box d-flex flex-column" id="chatBox"></div>
        <div class="input-group mt-3" style="min-height: 5vh;">
            <input type="text" class="form-control" id="messageInput" placeholder="Type a message...">
            <button id="sendBtn" class="btn btn-primary btn-lg rounded-circle shadow send-btn" onclick="sendMessage()">
                <i class="fas fa-paper-plane"></i>
            </button>

        </div>
    </div>

    <script>


        const queryString = window.location.search;
        const userId = queryString.substring(1);
        var UserName;

        async function searchUser() {
            try {
                const response = await fetch(`/user/getUserData/${userId}`); // Fetch user data from API
                if (!response.ok) {
                    throw new Error("Failed to fetch user data");
                }

                const data = await response.json(); // Convert response to JSON
                console.log(data)
                if (data[0] && data[0].name) {
                    // alert("userFound")
                    UserName = data[0].nickName;
                    // Save the username
                    console.log("User found:", UserName); // Debugging
                } else {
                    console.log("User data not found");
                    window.location.href = "/loginPage"
                }
            } catch (error) {
                console.error("Error fetching user data:", error);
            }
        }

        // Call function when page loads
        searchUser();


        console.log("User ID:", userId);

        const chatBox = document.getElementById("chatBox");
        const messageInput = document.getElementById("messageInput");
        const friend = "Friend";

        async function loadMessages() {
            chatBox.innerHTML = ""; // Clear chat box before loading messages

            try {
                // Fetch messages from the backend
                const response = await fetch('/message/getAllMessages');
                const data = await response.json(); // Call .json() function

                // Handle case where backend sends an error message instead of an array
                if (!Array.isArray(data)) {
                    chatBox.innerHTML = `<p style="color: gray;">${data.message || "No Messages Found"}</p>`;
                    return;
                }

                // Display messages
                if (data.length > 0) {
                    data.forEach(msg => {
                        displayMessage(msg.message, msg.userId, msg.userName, msg.createdAt, msg._id);
                    });
                } else {
                    chatBox.innerHTML = "<p style='color: gray;'>No Messages Yet</p>";
                }

                // Scroll to the bottom of chat
                chatBox.scrollTop = chatBox.scrollHeight;
            } catch (error) {
                console.error("Error loading messages:", error);
                chatBox.innerHTML = "<p style='color: red;'>Failed to load messages</p>";
            }
        }


        async function sendMessage() {
            const text = messageInput.value.trim();
            if (text === "") return;
            const time = new Date().toLocaleTimeString();
            const message = { message: text, userId: userId, userName: UserName };
            // console.log(message)
            const data = await fetch("/message/addMessage", {
                method: 'POST',
                headers: {
                    "Content-type": "application/json"
                },
                body: JSON.stringify(message)
            })
            loadMessages();
            messageInput.value = "";
        }

        function saveMessage(message) {
            let messages = JSON.parse(localStorage.getItem("chatMessages")) || [];
            messages.push(message);
            localStorage.setItem("chatMessages", JSON.stringify(messages));
        }

        function formatDateTime(timestamp) {
            const dateObj = new Date(timestamp); // Convert to Date object

            // Format date as DD-MM-YYYY
            const day = String(dateObj.getDate()).padStart(2, '0'); // Ensure two-digit day
            const month = String(dateObj.getMonth() + 1).padStart(2, '0'); // Months are 0-based
            const year = dateObj.getFullYear();
            const formattedDate = `${day}-${month}-${year}`;

            // Format time as HH:MM:SS AM/PM
            const formattedTime = dateObj.toLocaleTimeString("en-US", {
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                hour12: true
            });

            return `${formattedTime}`;
        }

        function displayMessage(text, userId1, sender, time, id, currentUser) {
            const messageDiv = document.createElement("div");
            const isSender = userId === userId1; // Check if the message belongs to the logged-in user
            messageDiv.className = `message ${isSender ? "sent text-end" : "received text-start btnNone"}`;

            const formattedTime = formatDateTime(time); // Convert timestamp to readable format

            messageDiv.innerHTML = `
        <strong>${sender}:</strong> ${text} 
        ${isSender ? `<button onclick="deleteMessage('${id}')" class="removebutton">‚ùå</button>` : ""} 
        <div class='timestamp' style="font-size: 7px;margin-top:5px ;color: gray;">${formattedTime}</div>
    `;

            chatBox.appendChild(messageDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        async function deleteMessage(id) {
            try {
                const response = await fetch('/message/deleteMessage', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id }) // Send the message ID
                });

                const result = await response.json(); // Parse response

                if (response.ok) {
                    console.log(result.message);
                    alert("Message deleted successfully!");
                    loadMessages(); // Refresh the chat after deletion
                } else {
                    alert(result.message || "Error in deleting message");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Failed to delete message");
            }
        }
        setInterval(loadMessages, 10000)

        window.onload = loadMessages;
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>